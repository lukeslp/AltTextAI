"use strict";const{app:c,BrowserWindow:f,ipcMain:o}=require("electron"),u=require("path"),g=!c.isPackaged,{exec:m,spawn:O}=require("child_process");require("https");require("fs");const y=require("os"),h=require("../../scripts/installer");let i,s,r;function p(){if(i=new f({width:1200,height:800,title:"Alt Text AI",icon:u.join(__dirname,"../../assets/icons/triangle_construct_light.gif"),webPreferences:{nodeIntegration:!1,contextIsolation:!0,preload:u.join(__dirname,"../preload/preload.js")}}),g)i.loadURL("http://localhost:5173"),i.webContents.openDevTools();else{const e=u.join(__dirname,"../../dist/index.html");i.loadFile(e).catch(a=>{console.error("Failed to load index.html:",a),i.loadURL(`file://${e}`).catch(t=>{console.error("Failed to load using file URL:",t)})})}i.once("ready-to-show",()=>{i.show()})}o.handle("install-ollama",async()=>{try{return r=r||new h,await r.checkOllamaInstallation()||await r.installOllama(),!0}catch(e){throw console.error("Failed to install Ollama:",e),e}});o.handle("pull-model",async(e,a)=>{try{return r=r||new h,await r.pullModel(a,t=>{e.sender.send("model-pull-progress",t)}),!0}catch(t){throw console.error("Failed to pull model:",t),t}});o.handle("start-ollama-server",async()=>{try{return r=r||new h,s=await r.startOllamaServer(),!0}catch(e){throw console.error("Failed to start Ollama server:",e),e}});o.handle("check-ollama-status",async()=>{try{return r=r||new h,await r.checkOllamaInstallation()}catch{return!1}});o.handle("quit-app",()=>{c.quit()});c.whenReady().then(()=>{p(),c.on("activate",()=>{f.getAllWindows().length===0&&p()})});c.on("window-all-closed",()=>{process.platform!=="darwin"&&c.quit()});c.on("before-quit",()=>{s&&s.kill()});const q=()=>new Promise((e,a)=>{m("ollama --version",(t,n)=>{if(t){a(t);return}e(n.trim())})}),v=()=>new Promise((e,a)=>{const n=y.platform()==="win32"?"where ollama":"which ollama";m(n,(l,d)=>{if(l){a(l);return}e(d.trim())})}),k=()=>new Promise((e,a)=>{if(!s){e();return}s.on("close",()=>{s=null,e()}),s.kill()});o.handle("get-ollama-version",async()=>{try{return await q()}catch(e){throw e}});o.handle("get-ollama-path",async()=>{try{return await v()}catch(e){throw e}});o.handle("stop-ollama-server",async()=>{try{return await k(),!0}catch(e){throw e}});const x=async()=>new Promise((e,a)=>{const t=y.platform();let n;switch(t){case"darwin":n="open -a Terminal";break;case"win32":n="start cmd";break;case"linux":const l=["gnome-terminal","konsole","xterm"];for(const d of l)try{m(`which ${d}`,w=>{if(!w){n=d;return}})}catch{}n||(n="xterm");break;default:a(new Error("Unsupported platform"));return}m(n,l=>{if(l){a(l);return}e()})});o.handle("open-terminal",async()=>{try{return await x(),!0}catch(e){throw console.error("Failed to open terminal:",e),e}});
